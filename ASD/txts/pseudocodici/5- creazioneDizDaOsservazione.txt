creaSpazioRilevanzaDaOsservazione(reteAutomi, osservazione){
    mappaStatoRilevenzaTransizioni <- new Map()
    coda <- new Queue()
    decorazioneIniziale <- new Set()

    statoRilevanzaIniziale <- new StatoRilevanzaRete(reteAutomi, decorazioneIniziale)   ▷ reteAutomi è nella condizione iniziale
    setDistanza(statoRilevanzaIniziale, 0)
    setStatoOsservazione(statoRilevanzaIniziale, getStatoIniziale(osservazione)) ▷ gli stati di rilevanza possiedono lo stato corrispondente nell''osservazione

    enqueue(coda, statoRilevanzaIniziale)

    while length[coda] > 0
        do  statoRilevanza <- dequeue(coda)
            setReteAutomi(reteAutomi, statoRilevanza)
            transizioniAbilitate <- getTutteTransizioniAbilitate(reteAutomi)
            listaAdiacenza <- []

            foreach transizione in transizioniAbilitate
                do  setReteAutomi(reteAutomi, statoRilevanza)
                    distanza <- getDistanza(statoRilevanza)
                    setStatoCorrente(osservazione, getStatoOsservazione(statoRilevanza)) ▷ porto l'osservazione nello stato in considerazione

                    statoFinale <- isInStatoFinale(osservazione)
                    mettiInCoda <- TRUE

                    if  hasEtichettaOsservabilità(transizione)
                        then    if  statoFinale     ▷ aggiungo anche livello successivo a quello finale per trovare Output degli stati finali
                                    then    nuovoStatoRilevanza <- calcolaStatoRilevanzaSucc(reteAutomi, transizione, decorazione[statoRilevanza])
                                    else    distanza <- distanza + 1
                                            etichetteOsservazione <- etichetteOsservazione(osservazione)   ▷ etichette uscenti dallo stato dell'osservazione
                                            if  getEtichettaOsservabilità(transizione) in etichetteOsservazione
                                                then    if  not statoFinale
                                                            then    avanzaOsservazione(osservazione, getEtichettaOsservabilità(transizione))
                                                        nuovoStatoRilevanza <- calcolaStatoRilevanzaSucc(reteAutomi, transizione, decorazione[statoRilevanza])
                                                        setStatoOsservazione(nuovoStatoRilevanza, getStatoCorrente(osservazione))
                                                ▷ tengo lo stato successivo solo per aggiornare gli output dello stato precedente
                                                else    nuovoStatoRilevanza <- calcolaStatoRilevanzaSucc(reteAutomi, transizione, decorazione[statoRilevanza])
                                                        mettiInCoda <- FALSE
                        else    nuovoStatoRilevanza <- calcolaStatoRilevanzaSucc(reteAutomi, transizione, decorazione[statoRilevanza])
                                setStatoOsservazione(nuovoStatoRilevanza, getStatoCorrente(osservazione))
                    
                    if  nuovoStatoRilevanza is not null
                        then    add(listaAdiacenza, [transizione, nuovoStatoRilevanza])
                                if  nuovoStatoRilevanza not in keys[mappaStatoRilevenzaTransizioni]
                                    then    setDistanza(nuovoStatoRilevanza, distanza)
                                            enqueue(coda, nuovoStatoRilevanza)
                                    else    statoGiàInSpazio <- get(mappaStatoRilevenzaTransizioni, nuovoStatoRilevanza)
                                            if  getDistanza(statoGiàInSpazio) > distanza
                                                then setDistanza(statoGiàInSpazio, distanza)

            put(mappaStatoRilevenzaTransizioni, statoRilevanza, listaAdiacenza) ▷ inserisce nella mappa lo statoRilevanza come chiave e la lista di adiacenza come valore
            
    return mappaStatoRilevenzaTransizioni
}

etichetteOsservazione(osservazione){
    etichette <- []
    foreach transizione in getTransizioniUscenti(getStatoCorrente(osservazione))
        do  if  not equals(getEtichettaOsservabilità(transizione), "eps")
                then add(etichette, getEtichettaOsservabilità(transizione))
    return etichette
}


▷ stessi metodi di spazioRilevanzaRete.txt:

setReteAutomi(reteAutomi, statoRilevanza){
    setStatiCorrentiAutomi(reteAutomi, statiCorrenti[statoRilevanza])
    setEventiSuLink(reteAutomi, contenutiLinks[statoRilevanza])
    aggiornaMappaTransizioniAbilitate(reteAutomi)
}

calcolaStatoRilevanzaSucc(reteAutomi, transizione, decorazione){
    newDecorazione <- decorazione
    svolgiTransizione(reteAutomi, transizione)
    if  hasEtichettaRilevanza(transizione) && etichettaRilevanza[transizione] not in newDecorazione
        then add(newDecorazione, etichettaRilevanza[t])
    return new StatoRilevanzaRete(reteAutomi, newDecorazione)
}

getTutteTransizioniAbilitate(reteAutomi){
    transizioniAbilitate <- []
    foreach elencoTransizioni in values[mappaAutomiTransizioniAbilitate]
        do foreach transizione in elencoTransizioni
            do add(transizioniAbilitate, transizione)
    return transizioniAbilitate
}

svolgiTransizione(reteAutomi, transizione){
    if eventoIngresso[transizione] is not null
        then svolgiEvento(transizione.eventoIngresso)
    if eventiUscita[transizione] is not null
        then foreach evento in eventiUscita
                do aggiungiEventoSuLink(evento)
    foreach automa in reteAutomi
        do foreach elencoTransizioni in values[mappaStatoTransizioni[automa]]
                do if transizione is in elencoTransizioni
                        then  eseguiTransizione(automa, transizione)
                              aggiornaMappaAutomiTransizioniAbilitate(reteAutomi)
                              return
}


aggiornaMappaAutomiTransizioniAbilitate(reteAutomi){
    mappaAggiornata <- new Map()
    foreach automa in reteAutomi
        do transizioniUscenti <- transizioniUscentiDaStatoCorrente(automa)
           transizioniConEventiAbilitati <- []
           foreach transizione in transizioniUscenti
               do if eventiUscita[transizione] is null AND eventoIngresso[transizione] is null
                    then add(transizioniConEventiAbilitati, transizione)
                  ▷ CONTROLLO CHE EVENTO SIA NULL O CHE CORRISPONDA A QUELLO SUL LINK INDICATO DALL'EVENTO STESSO
                  elseif eventoIngresso[transizione] is null OR eventoIngresso[transizione] = evento[link[eventoIngresso[transizione]]]
                        then linkUscitaDisponibili <- TRUE
                             if eventiUscita[transizione] not isEmpty
                                then linkUscitaDisponibili <- linkDestinazioneDisponibili(eventiUscita[transizione])
                             if linkUscitaDisponibili
                                then add(transizioniConEventiAbilitati, transizione)
           put(mappaAggiornata, automa, transizioniConEventiAbilitati)
    mappaAutomiTransizioniAbilitate[reteAutomi] <- mappaAggiornata
}

eseguiTransizione(automa, transizione){
    statoCorrente[automa] <- statoDestinazione[transizione]
}

linkDestinazioneDisponibili(eventi){
    foreach evento in eventi
        do if evento is null
             then return false
            if link[evento] not isVuoto
              then return false
    return true
}
