▷ LO SPAZIO DI RILEVANZA È UN AUTOMA -> RAPPRESENTATO TRAMITE UN GRAFO -> RAPPRESENTATO TRAMITE UNA MAPPA <STATORILEVANZARETEPARTENZA, PAIR<TRANSIZIONE, STATORILEVANZADESTINAZIONE>>

creaSpazioRilevanza(reteAutomi){
    mappaStatoRilevenzaTransizioni <- new Map()
    coda <- new Queue()
    decorazioneIniziale <- new Set()

    statoRilevanzaIniziale <- new StatoRilevanzaRete(reteAutomi, decorazioneIniziale)   ▷ reteAutomi è nella condizione iniziale
    enqueue(coda, statoRilevanzaIniziale)
    while length[coda] > 0
        do  statoRilevanza <- dequeue(coda)
            setReteAutomi(reteAutomi, statoRilevanza)
            transizioniAbilitate <- getTutteTransizioniAbilitate(reteAutomi)
            listaAdiacenza <- []
            foreach transizione in transizioniAbilitate
                do  setReteAutomi(reteAutomi, statoRilevanza)
                    nuovoStatoRilevanza <- calcolaStatoRilevanzaSucc(reteAutomi, transizione, decorazione[statoRilevanza])
                    add(listaAdiacenza, [transizione, nuovoStatoRilevanza]) ▷ aggiunge alla lista di adiacenza dello statoRilevanza la coppia [transizione, statoDestinazione]
                    if nuovoStatoRilevanza not in keys[mappaStatoRilevenzaTransizioni]
                        then enqueue(coda, nuovoStatoRilevanza)

            put(mappaStatoRilevenzaTransizioni, statoRilevanza, listaAdiacenza) ▷ inserisce nella mappa lo statoRilevanza come chiave e la lista di adiacenza come valore
            
    return mappaStatoRilevenzaTransizioni
}

setReteAutomi(reteAutomi, statoRilevanza){
    setStatiCorrentiAutomi(reteAutomi, statiCorrenti[statoRilevanza])
    setEventiSuLink(reteAutomi, contenutiLinks[statoRilevanza])
    aggiornaMappaTransizioniAbilitate(reteAutomi)
}

calcolaStatoRilevanzaSucc(reteAutomi, transizione, decorazione){
    newDecorazione <- decorazione
    svolgiTransizione(reteAutomi, transizione)
    if hasEtichettaRilevanza(transizione) && etichettaRilevanza[transizione] not in newDecorazione
        then add(newDecorazione, etichettaRilevanza[t])
    return new StatoRilevanzaRete(reteAutomi, newDecorazione)
}

getTutteTransizioniAbilitate(reteAutomi){
    transizioniAbilitate <- []
    foreach elencoTransizioni in values[mappaAutomiTransizioniAbilitate]
        do foreach transizione in elencoTransizioni
            do add(transizioniAbilitate, transizione)
    return transizioniAbilitate
}

svolgiTransizione(reteAutomi, transizione){
    if eventoIngresso[transizione] is not null
        then svolgiEvento(eventoIngresso[transizione])
    if eventiUscita[transizione] is not null
        then foreach evento in eventiUscita
                do aggiungiEventoSuLink(evento)
    foreach automa in reteAutomi
        do foreach elencoTransizioni in values[mappaStatoTransizioni[automa]]
                do if transizione is in elencoTransizioni
                        then  eseguiTransizione(automa, transizione)
                              aggiornaMappaAutomiTransizioniAbilitate(reteAutomi)
                              return
}


aggiornaMappaAutomiTransizioniAbilitate(reteAutomi){
    mappaAggiornata <- new Map()
    foreach automa in reteAutomi
        do transizioniUscenti <- transizioniUscentiDaStatoCorrente(automa)
           transizioniConEventiAbilitati <- []
           foreach transizione in transizioniUscenti
               do if eventiUscita[transizione] is null AND eventoIngresso[transizione] is null
                    then add(transizioniConEventiAbilitati, transizione)
                  ▷ CONTROLLO CHE EVENTO SIA NULL O CHE CORRISPONDA A QUELLO SUL LINK INDICATO DALL'EVENTO STESSO
                  elseif eventoIngresso[transizione] is null OR eventoIngresso[transizione] = evento[link[eventoIngresso[transizione]]]
                        then linkUscitaDisponibili <- TRUE
                             if eventiUscita[transizione] not isEmpty
                                then linkUscitaDisponibili <- linkDestinazioneDisponibili(eventiUscita[transizione])
                             if linkUscitaDisponibili
                                then add(transizioniConEventiAbilitati, transizione)
           put(mappaAggiornata, automa, transizioniConEventiAbilitati)
    mappaAutomiTransizioniAbilitate[reteAutomi] <- mappaAggiornata
}

eseguiTransizione(automa, transizione){
    statoCorrente[automa] <- statoDestinazione[transizione]
}

linkDestinazioneDisponibili(eventi){
    foreach evento in eventi
        do if evento is null
             then return false
            if link[evento] not isVuoto
              then return false
    return true
}
